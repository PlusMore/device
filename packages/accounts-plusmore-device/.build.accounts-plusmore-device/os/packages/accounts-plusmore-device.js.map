{"version":3,"file":"/packages/accounts-plusmore-device.js","sources":["accounts-plusmore-device/server.js"],"names":[],"mappings":";;;;;;;;AAAA,kD;AACA,sB;AACA,qC;;AAEA,kB;AACA,oB;AACA,oB;AACA,K;;AAEA,qC;AACA,iD;AACA,c;AACA,oD;;AAEA,0C;AACA,+B;AACA,qB;AACA,K;;AAEA,gC;AACA,G;;AAEA,kD;AACA,oB;AACA,qC;;AAEA,kB;AACA,oB;AACA,oB;AACA,K;;AAEA,qC;AACA,iD;AACA,c;AACA,oD;;AAEA,0C;AACA,+B;AACA,qB;AACA,K;;AAEA,gC;AACA,G;;AAEA,kD;AACA,mB;AACA,qC;;AAEA,kB;AACA,mB;AACA,e;AACA,K;;AAEA,mC;AACA,yD;AACA,c;AACA,mD;AACA,G;AACA,E;AACA,+C;AACA,gC;AACA,kF;AACA,G;;AAEA,qE;AACA,iC;AACA,+C;AACA,G;;AAEA,4B;AACA,G;;AAEA,E;;AAEA,+B;AACA,gC;AACA,6B;AACA,G","sourcesContent":["Accounts.registerLoginHandler(function (options) {\n  if (!options.device)\n    return undefined; // don't handle\n\n  check(options, {\n    device: Boolean,\n    deviceId: String\n  });\n\n  // make sure there's a valid device\n  var device = Devices.findOne(options.deviceId);\n  if (!device)\n    throw new Meteor.error(403, \"Device not found\");\n\n  var meteorUserId = Meteor.users.insert({\n    deviceId: options.deviceId,\n    roles: ['device']\n  });\n\n  return {userId: meteorUserId};\n});\n\nAccounts.registerLoginHandler(function (options) {\n  if (!options.stay)\n    return undefined; // don't handle\n\n  check(options, {\n    device: Boolean,\n    deviceId: String\n  });\n\n  // make sure there's a valid device\n  var device = Devices.findOne(options.deviceId);\n  if (!device)\n    throw new Meteor.error(403, \"Device not found\");\n\n  var meteorUserId = Meteor.users.insert({\n    deviceId: options.deviceId,\n    roles: ['device']\n  });\n\n  return {userId: meteorUserId};\n});\n\nAccounts.registerLoginHandler(function (options) {\n  if (!options.pin)\n    return undefined; // don't handle\n\n  check(options, {\n    userId: String,\n    pin: String\n  });\n\n  // make sure there's a valid user\n  var user = Meteor.users().findOne(loginRequest.userId);\n  if (!user) {\n    throw new Meteor.Error(500, 'User not found.');\n  }\n  \n  Meteor.users.update(userId, loginAttempts++);\n  if (user.loginAttempts >= 5) {\n    throw new Meteor.Error(500, 'Too many incorrect attempts. Account Blocked.');;\n  }\n\n  // make this more secure - hash the pin - look at accounts password\n  if (user.pin !== options.pin) {\n    throw new Meteor.Error(500, 'Invalid Pin');\n  }\n\n  return {userId: user._id};\n});\n\n  \n\nAccounts.addAutopublishFields({\n  forLoggedInUser: ['deviceId'],\n  forOtherUsers: ['deviceId']\n});"]}